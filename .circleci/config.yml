version: 2.1

# Variables
var_1: &working_directory ~/repo

machine:
  pre:
    - mkdir ~/.cache/yarn

dependencies:
  cache_directories:
    - ~/.cache/yarn

executors:
  linux:
    working_directory: *working_directory
    docker:
      - image: cimg/node:14.17-browsers

  windows:
    working_directory: *working_directory
    resource_class: windows.medium
    machine:
      image: windows-server-2019-vs2019:stable
    shell: cmd.exe

commands:
  setup:
    parameters:
      os:
        type: string
    steps:
      - checkout
      - when:
          condition:
            equal: [<< parameters.os >>, windows]
          steps:
            - run: nvm install 14.17
            - run: nvm use 14.17
            - run: npm install -g yarn@1.22.10
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - nrwl-nx-yarn-packages-<< parameters.os >>-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn install --prefer-offline --frozen-lockfile --non-interactive --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          # Windows needs its own cache key because binaries in node_modules are different.
          key: nrwl-nx-yarn-packages-<< parameters.os >>-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - when:
          condition:
            equal: [<< parameters.os >>, linux]
          steps:
            - run:
                name: Install PNPM
                command: npm install --prefix=$HOME/.local -g pnpm@6.9.1
      - when:
          condition:
            equal: [<< parameters.os >>, windows]
          steps:
            - run:
                name: Install PNPM
                command: npm install -g pnpm@6.9.1

jobs:
  agent:
    parameters:
      os:
        type: string
        default: 'linux'
      cli:
        type: string
        default: ''
      pm:
        type: string
        default: pnpm
    executor: << parameters.os >>
    environment:
      GIT_AUTHOR_NAME: test@test.com
      GIT_AUTHOR_EMAIL: Test
      GIT_COMMITTER_EMAIL: test@test.com
      GIT_COMMITTER_NAME: Test
      NX_E2E_CI_CACHE_KEY: e2e-circleci-<< parameters.os >>-<< parameters.pm >>
      SELECTED_PM: << parameters.pm >>
      SELECTED_CLI: << parameters.cli >>
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Agent
          command: npx nx-cloud start-agent
          no_output_timeout: 60m
  pr-main:
    parameters:
      os:
        type: string
        default: 'linux'
      cli:
        type: string
        default: ''
      pm:
        type: string
        default: pnpm
    executor: << parameters.os >>
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: 'true'
      SELECTED_CLI: << parameters.cli >>
      NX_E2E_CI_CACHE_KEY: e2e-circleci-<< parameters.os >>-<< parameters.pm >>
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Check Documentation
          command: yarn documentation
      - run:
          name: Check Imports
          command: yarn check-imports
      - run:
          name: Check Formatting
          command: yarn check-format
      - run:
          name: Check Package dependencies
          command: yarn depcheck
      - run:
          name: Get Last Sucessful Tag
          shell: '/bin/bash'
          command: |
            source ./scripts/circleci/get-last-successful-tag.sh $CIRCLE_BRANCH master nx_successful_ci_run__* false
            echo "export BASE_SHA=\"$BASE_SHA\";" >> $BASH_ENV
      - run:
          name: Run Builds
          command: |
            npx nx affected --target=build --base=$BASE_SHA --parallel --max-parallel=3
      - run:
          name: Run Unit Tests
          command: |
            npx nx affected --target=test --base=$BASE_SHA --parallel --max-parallel=2
      - run:
          name: Run Linting
          command: |
            npx nx affected --target=lint --base=$BASE_SHA --parallel --max-parallel=4
      - run:
          name: Run E2E Tests
          command: |
            npx nx affected --target=e2e --base=$BASE_SHA
          no_output_timeout: 45m
      - run:
          name: Stop All Running Agents for This CI Run
          command: npx nx-cloud stop-all-agents
  trunk-main:
    parameters:
      os:
        type: string
        default: 'linux'
      cli:
        type: string
        default: ''
      pm:
        type: string
        default: pnpm
    executor: << parameters.os >>
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: 'true'
      SELECTED_CLI: << parameters.cli >>
      NX_E2E_CI_CACHE_KEY: e2e-circleci-<< parameters.os >>-<< parameters.pm >>
      NX_E2E_RUN_CYPRESS: 'true'
    steps:
      - setup:
          os: << parameters.os >>
      - run:
          name: Get Last Sucessful Tag
          shell: '/bin/bash'
          command: |
            source ./scripts/circleci/get-last-successful-tag.sh $CIRCLE_BRANCH master nx_successful_ci_run__* false
            echo "export BASE_SHA=\"$BASE_SHA\";" >> $BASH_ENV
      - run:
          name: Run Builds
          command: npx nx affected --target=build --base=$BASE_SHA --parallel --max-parallel=3
      - run:
          name: Run Unit Tests
          command: npx nx affected --target=test --base=$BASE_SHA --parallel --max-parallel=2
      - run:
          name: Run Linting
          command: npx nx affected --target=lint --base=$BASE_SHA --parallel --max-parallel=4
      - run:
          name: Run E2E Tests
          command: npx nx affected --target=e2e --base=$BASE_SHA
          no_output_timeout: 45m
      - run:
          name: Stop All Running Agents for This CI Run
          command: npx nx-cloud stop-all-agents
      - run:
          when: on_success
          name: Save successful tag
          command: |
            ./scripts/circleci/tag-successful-build.sh nx_successful_ci_run__${CIRCLE_WORKFLOW_ID}
workflows:
  build:
    jobs:
      - agent:
          name: 'agent1'
      - agent:
          name: 'agent2'
      - agent:
          name: 'agent3'
      - agent:
          name: 'agent4'
      - agent:
          name: 'agent5'
      - agent:
          name: 'agent6'
      - pr-main:
          filters:
            branches:
              ignore: master
      - trunk-main:
          filters:
            branches:
              only: master
