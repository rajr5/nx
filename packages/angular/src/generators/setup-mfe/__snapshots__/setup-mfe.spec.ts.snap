// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Init MFE --federationType=dynamic should create a host with the correct configurations 1`] = `
"import { setRemoteDefinitions } from '@nrwl/angular/mfe';

  fetch('/assets/module-federation.manifest.json')
  .then((res) => res.json())
  .then(definitions => setRemoteDefinitions(definitions))
  .then(() => import('./bootstrap').catch(err => console.error(err)))"
`;

exports[`Init MFE should add a remote application and add it to a specified host applications router config 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { NxWelcomeComponent } from './nx-welcome.component';
import { RouterModule } from '@angular/router';

@NgModule({
  declarations: [
    AppComponent,
    NxWelcomeComponent
  ],
  imports: [
    BrowserModule,
    RouterModule.forRoot([{
         path: 'remote1', 
         loadChildren: () => import('remote1/Module').then(m => m.RemoteEntryModule)
     }, {
         path: 'remote2', 
         loadChildren: () => import('remote2/Module').then(m => m.RemoteEntryModule)
     }], {initialNavigation: 'enabledBlocking'})
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
"
`;

exports[`Init MFE should add a remote application and add it to a specified host applications webpack config that contains a remote application already 1`] = `
"module.exports = {
  name: 'app1',
  remotes: ['remote1','remote2',]
}"
`;

exports[`Init MFE should add a remote application and add it to a specified host applications webpack config when no other remote has been added to it 1`] = `
"module.exports = {
  name: 'app1',
  remotes: ['remote1',]
}"
`;

exports[`Init MFE should add a remote to dynamic host correctly 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { NxWelcomeComponent } from './nx-welcome.component';
import { RouterModule } from '@angular/router';
import { loadRemoteModule } from '@nrwl/angular/mfe';

@NgModule({
  declarations: [
    AppComponent,
    NxWelcomeComponent
  ],
  imports: [
    BrowserModule,
    RouterModule.forRoot([{
         path: 'remote1', 
         loadChildren: () => loadRemoteModule('remote1', './Module').then(m => m.RemoteEntryModule)
     }], {initialNavigation: 'enabledBlocking'})
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
"
`;

exports[`Init MFE should create webpack and mfe configs correctly 1`] = `
"const { withModuleFederation } = require('@nrwl/angular/module-federation');
const config = require('./module-federation.config');
module.exports = withModuleFederation(config);"
`;

exports[`Init MFE should create webpack and mfe configs correctly 2`] = `
"module.exports = {
  name: 'app1',
  remotes: []
}"
`;

exports[`Init MFE should create webpack and mfe configs correctly 3`] = `
"const { withModuleFederation } = require('@nrwl/angular/module-federation');
const config = require('./module-federation.config');
module.exports = withModuleFederation(config);"
`;

exports[`Init MFE should create webpack and mfe configs correctly 4`] = `
"module.exports = {
  name: 'remote1',
  exposes: {
    './Module': 'apps/remote1/src/app/remote-entry/entry.module.ts',
  },
}"
`;
