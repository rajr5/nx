// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Init MFE should add a remote application and add it to a specified host applications router config 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { RouterModule } from '@angular/router';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    RouterModule.forRoot([{
         path: 'remote1', 
         loadChildren: () => import('remote1/Module').then(m => m.RemoteEntryModule)
     }, {
         path: 'remote2', 
         loadChildren: () => import('remote2/Module').then(m => m.RemoteEntryModule)
     }], {initialNavigation: 'enabledBlocking'})
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
"
`;

exports[`Init MFE should add a remote application and add it to a specified host applications webpack config that contains a remote application already 1`] = `
"const ModuleFederationPlugin = require(\\"webpack/lib/container/ModuleFederationPlugin\\");
const mf = require(\\"@angular-architects/module-federation/webpack\\");
const path = require(\\"path\\");

const sharedMappings = new mf.SharedMappings();
sharedMappings.register(path.join(__dirname, \\"../../tsconfig.base.json\\"), [
  /* mapped paths to share */
]);

module.exports = {
  output: {
    uniqueName: \\"app1\\",
    publicPath: \\"auto\\",
  },
  optimization: {
    runtimeChunk: false,
    minimize: false,
  },
  resolve: {
    alias: {
      ...sharedMappings.getAliases(),
    },
  },
  plugins: [
    new ModuleFederationPlugin({
      remotes: {
    		\\"remote1\\": 'remote1@http://localhost:4201/remoteEntry.js',
    		\\"remote2\\": 'remote2@http://localhost:4202/remoteEntry.js',
      
      },
      shared: {
        \\"@angular/core\\": { singleton: true, strictVersion: true },
        \\"@angular/common\\": { singleton: true, strictVersion: true },
        \\"@angular/common/http\\": { singleton: true, strictVersion: true },
        \\"@angular/router\\": { singleton: true, strictVersion: true },
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  ],
};
"
`;

exports[`Init MFE should add a remote application and add it to a specified host applications webpack config when no other remote has been added to it 1`] = `
"const ModuleFederationPlugin = require(\\"webpack/lib/container/ModuleFederationPlugin\\");
const mf = require(\\"@angular-architects/module-federation/webpack\\");
const path = require(\\"path\\");

const sharedMappings = new mf.SharedMappings();
sharedMappings.register(path.join(__dirname, \\"../../tsconfig.base.json\\"), [
  /* mapped paths to share */
]);

module.exports = {
  output: {
    uniqueName: \\"app1\\",
    publicPath: \\"auto\\",
  },
  optimization: {
    runtimeChunk: false,
    minimize: false,
  },
  resolve: {
    alias: {
      ...sharedMappings.getAliases(),
    },
  },
  plugins: [
    new ModuleFederationPlugin({
      remotes: {
    		\\"remote1\\": 'remote1@http://localhost:4200/remoteEntry.js',
      
      },
      shared: {
        \\"@angular/core\\": { singleton: true, strictVersion: true },
        \\"@angular/common\\": { singleton: true, strictVersion: true },
        \\"@angular/common/http\\": { singleton: true, strictVersion: true },
        \\"@angular/router\\": { singleton: true, strictVersion: true },
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  ],
};
"
`;

exports[`Init MFE should create webpack configs correctly 1`] = `
"const ModuleFederationPlugin = require(\\"webpack/lib/container/ModuleFederationPlugin\\");
const mf = require(\\"@angular-architects/module-federation/webpack\\");
const path = require(\\"path\\");

const sharedMappings = new mf.SharedMappings();
sharedMappings.register(path.join(__dirname, \\"../../tsconfig.base.json\\"), [
  /* mapped paths to share */
]);

module.exports = {
  output: {
    uniqueName: \\"app1\\",
    publicPath: \\"auto\\",
  },
  optimization: {
    runtimeChunk: false,
    minimize: false,
  },
  resolve: {
    alias: {
      ...sharedMappings.getAliases(),
    },
  },
  plugins: [
    new ModuleFederationPlugin({
      remotes: {
      
      },
      shared: {
        \\"@angular/core\\": { singleton: true, strictVersion: true },
        \\"@angular/common\\": { singleton: true, strictVersion: true },
        \\"@angular/common/http\\": { singleton: true, strictVersion: true },
        \\"@angular/router\\": { singleton: true, strictVersion: true },
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  ],
};
"
`;

exports[`Init MFE should create webpack configs correctly 2`] = `
"const ModuleFederationPlugin = require(\\"webpack/lib/container/ModuleFederationPlugin\\");
const mf = require(\\"@angular-architects/module-federation/webpack\\");
const path = require(\\"path\\");

const sharedMappings = new mf.SharedMappings();
sharedMappings.register(path.join(__dirname, \\"../../tsconfig.base.json\\"), [
  /* mapped paths to share */
]);

module.exports = {
  output: {
    uniqueName: \\"remote1\\",
    publicPath: \\"auto\\",
  },
  optimization: {
    runtimeChunk: false,
    minimize: false,
  },
  resolve: {
    alias: {
      ...sharedMappings.getAliases(),
    },
  },
  plugins: [
    new ModuleFederationPlugin({
      name: \\"remote1\\",
      filename: \\"remoteEntry.js\\",
      exposes: {
        './Module': 'apps/remote1/src/app/remote-entry/entry.module.ts',
      },
      shared: {
        \\"@angular/core\\": { singleton: true, strictVersion: true },
        \\"@angular/common\\": { singleton: true, strictVersion: true },
        \\"@angular/common/http\\": { singleton: true, strictVersion: true },
        \\"@angular/router\\": { singleton: true, strictVersion: true },
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  ],
};
"
`;
