{
  "githubRoot": "https://github.com/nrwl/nx/blob/master",
  "name": "cli",
  "description": "Smart, Fast and Extensible Build System",
  "root": "/packages/cli",
  "source": "/packages/cli/src",
  "documentation": [
    {
      "name": "create-nx-workspace",
      "id": "create-nx-workspace",
      "file": "generated/cli/create-nx-workspace",
      "content": "---\ntitle: 'create-nx-workspace - CLI command'\ndescription: 'Create a new Nx workspace'\n---\n\n# create-nx-workspace\n\nCreate a new Nx workspace\n\n## Usage\n\n```bash\ncreate-nx-workspace [name] [options]\n```\n\nInstall `create-nx-workspace` globally to invoke the command directly, or use `npx create-nx-workspace`, `yarn create nx-workspace`, or `pnpx create-nx-workspace`.\n\n## Options\n\n### allPrompts\n\nType: boolean\n\nDefault: false\n\nShow all prompts\n\n### appName\n\nType: string\n\nThe name of the application when a preset with pregenerated app is selected\n\n### ci\n\nType: string\n\nChoices: [github, circleci, azure]\n\nGenerate a CI workflow file\n\n### cli\n\nType: string\n\nChoices: [nx, angular]\n\nCLI to power the Nx workspace\n\n### defaultBase\n\nType: string\n\nDefault: main\n\nDefault base to use for new projects\n\n### help\n\nType: boolean\n\nShow help\n\n### interactive\n\nType: boolean\n\nEnable interactive mode with presets\n\n### name\n\nType: string\n\nWorkspace name (e.g. org name)\n\n### nxCloud\n\nType: boolean\n\nUse Nx Cloud\n\n### packageManager\n\nType: string\n\nChoices: [npm, pnpm, yarn]\n\nDefault: npm\n\nPackage manager to use\n\n### preset\n\nType: string\n\nCustomizes the initial content of your workspace. Default presets include: [\"apps\", \"empty\", \"core\", \"npm\", \"ts\", \"web-components\", \"angular\", \"angular-nest\", \"react\", \"react-express\", \"react-native\", \"next\", \"nest\", \"express\"]. To build your own see https://nx.dev/packages/nx-plugin#preset\n\n### style\n\nType: string\n\nStyle option to be used when a preset with pregenerated app is selected\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "generate",
      "id": "generate",
      "file": "generated/cli/generate",
      "content": "---\ntitle: 'generate - CLI command'\ndescription: 'Runs a generator that creates and/or modifies files based on a generator from a collection.'\n---\n\n# generate\n\nRuns a generator that creates and/or modifies files based on a generator from a collection.\n\n## Usage\n\n```bash\nnx generate <collection:generator>\n```\n\n```bash\nnx g <generator>\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nGenerate a new Angular application:\n\n```bash\nnx generate @nrwl/angular:app myapp\n```\n\nGenerate a new React application:\n\n```bash\nnx generate @nrwl/react:app myapp\n```\n\nGenerate a new web component application:\n\n```bash\nnx generate @nrwl/web:app myapp\n```\n\nGenerate a new Node application:\n\n```bash\nnx generate @nrwl/node:app myapp\n```\n\nGenerate a new Angular library application:\n\n```bash\nnx generate @nrwl/angular:library mylibrary\n```\n\nGenerate a new React library application:\n\n```bash\nnx generate @nrwl/react:library mylibrary\n```\n\nGenerate a new Node library application:\n\n```bash\nnx generate @nrwl/node:library mylibrary\n```\n\n## Options\n\n### defaults\n\nDefault: `false`\n\nWhen true, disables interactive input prompts for options with a default.\n\n### dryRun\n\nDefault: `false`\n\nWhen true, disables interactive input prompts for options with a default.\n\n### force\n\nDefault: `false`\n\nWhen true, forces overwriting of existing files.\n\n### interactive\n\nDefault: `true`\n\nWhen false, disables interactive input prompts.\n\n### help\n\nShow help and display available generators in the default collection.\n\n### version\n\nShow version number\n"
    },
    {
      "name": "serve",
      "id": "serve",
      "file": "generated/cli/serve",
      "content": "---\ntitle: 'serve - CLI command'\ndescription: 'Builds and serves an application, rebuilding on file changes.'\n---\n\n# serve\n\nBuilds and serves an application, rebuilding on file changes.\n\n## Usage\n\nThe `serve` command is a built-in alias to the [run command](/cli/run).\n\nThese two commands are equivalent:\n\n```bash\nnx serve <project> [options]\n```\n\n```bash\nnx run <project>:serve [options]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nServe the `myapp` project:\n\n```bash\nnx serve myapp\n```\n\n## Common Options\n\nThe options below are common to the `serve` command used within an Nx workspace. The Web and Angular-specific serve options are listed after these options.\n\n### allowedHosts\n\nThis option allows you to whitelist services that are allowed to access the dev server.\n\n### hmr\n\nEnable hot module replacement.\n\n### host\n\nHost to listen on.\n\nDefault: `localhost`\n\n### liveReload\n\nWhether to reload the page on change, using live-reload.\n\nDefault: `true`\n\n### open (-o)\n\nOpen the application in the browser.\n\n### port\n\nPort to listen on.\n\nDefault: `4200`\n\n### publicHost\n\nPublic URL where the application will be served\n\n### ssl\n\nServe using HTTPS.\n\n### sslKey\n\nSSL key to use for serving HTTPS.\n\n### sslCert\n\nSSL certificate to use for serving HTTPS.\n\n### watch\n\nWatches for changes and rebuilds application\n\nDefault: `true`\n\n### help\n\nShow help\n\n### version\n\nShow version number\n\n## Web-Serve Options\n\n### buildTarget\n\nTarget which builds the application\n\n### memoryLimit\n\nMemory limit for type checking service process in MB.\n\n### maxWorkers\n\nNumber of workers to use for type checking.\n\n## Angular-Serve Options\n\n### aot\n\nBuild using Ahead of Time compilation.\n\n### base-href\n\nBase url for the application being built.\n\n### browser-target\n\nTarget to serve.\n\n### build-event-log\n\n**EXPERIMENTAL** Output file path for Build Event Protocol events.\n\n### common-chunk\n\nUse a separate bundle containing code used across multiple bundles.\n\n### configuration (-c)\n\nA named build target, as specified in the \"configurations\" section of the workspace configuration.\nEach named target is accompanied by a configuration of option defaults for that target.\nSetting this explicitly overrides the `--prod` flag\n\n### deploy-url\n\nURL where files will be deployed.\n\n### disable-host-check\n\nDon't verify connected clients are part of allowed hosts.\n\n### eval-source-map\n\nOutput in-file eval sourcemaps.\n\n### hmr-warning\n\nShow a warning when the `--hmr` option is enabled.\n\n### optimization\n\nEnables optimization of the build output.\n\n### poll\n\nEnable and define the file watching poll time period in milliseconds.\n\n### prod\n\nShorthand for `--configuration=production`.\nWhen true, sets the build configuration to the production target.\nBy default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.\n\n### progress\n\nLog progress to the console while building.\n\n### proxy-config\n\nProxy configuration file.\n\n### public-host\n\nThe URL that the browser client (or live-reload client, if enabled) should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies.\n\n### serve-path\n\nThe pathname where the app will be served.\n\n### serve-path-default-warning\n\nShow a warning when deploy-url/base-href use unsupported serve path values.\n\n### source-map\n\nOutput sourcemaps.\n\n### vendor-chunk\n\nUse a separate bundle containing only vendor libraries.\n\n### vendor-source-map\n\nResolve vendor packages sourcemaps.\n\n### verbose\n\nAdds more details to output logging.\n"
    },
    {
      "name": "build",
      "id": "build",
      "file": "generated/cli/build",
      "content": "---\ntitle: 'build - CLI command'\ndescription: 'Compiles an application into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.'\n---\n\n# build\n\nCompiles an application into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.\n\n## Usage\n\nThe `build` command is a built-in alias to the [run command](/cli/run).\n\nThese two commands are equivalent:\n\n```bash\nnx build <project> [options]\n```\n\n```bash\nnx run <project>:build [options]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nCompile a `production` build of the `myapp` project:\n\n```bash\nnx build myapp --prod\n```\n\n## Options\n\nThe options below are common to the `build` command used within an Nx workspace. The Web and Angular-specific build options are listed after these options.\n\n### baseHref\n\nDefault: `/`\n\nBase url for the application being built.\n\n### commonChunk\n\nUse a separate bundle containing code used across multiple bundles.\n\nDefault: `true`\n\n### budgets\n\nBudget thresholds to ensure parts of your application stay within boundaries which you set.\n\n### namedChunks\n\nDefault: `true`\n\nNames the produced bundles according to their entry file\n\n### deployUrl\n\nURL where the application will be deployed.\n\n### es2015Polyfills\n\nConditional polyfills loaded in browsers which do not support ES2015.\n\n### extractCss\n\nExtract css into a .css file\n\n### extractLicenses\n\nExtract all licenses in a separate file, in the case of production builds only.\n\n### index\n\nHTML File which will be contain the application\n\n### main\n\nThe name of the main entry-point file.\n\n### tsConfig\n\nThe name of the Typescript configuration file.\n\n### outputPath\n\nThe output path of the generated files.\n\n### progress\n\nLog progress to the console while building.\n\n### optimization\n\nEnables optimization of the build output.\n\n### outputHashing\n\nDefault: `none`\n\nDefine the output filename cache-busting hashing mode.\n\n### scripts\n\nExternal Scripts which will be included before the main application entry.\n\n### showCircularDependencies\n\nDefault: `true`\n\nShow circular dependency warnings on builds.\n\n### sourceMap\n\nDefault: `true`\n\nOutput sourcemaps.\n\n### statsJson\n\nGenerates a 'stats.json' file which can be analyzed using tools such as: 'webpack-bundle-analyzer' or <https://webpack.github.io/analyse>.\n\n### styles\n\nExternal Styles which will be included with the application\n\n### subresourceIntegrity\n\nEnables the use of subresource integrity validation.\n\n### vendorChunk\n\nDefault: `true`\n\nUse a separate bundle containing only vendor libraries.\n\n### verbose\n\nEmits verbose output\n\n### watch\n\nEnable re-building when files change.\n\n### help\n\nShow help information\n\n### version\n\nShow version number\n\n## Web-Build Options\n\n### assets\n\nList of static application assets.\n\n### fileReplacements\n\nReplace files with other files in the build.\n\n### maxWorkers\n\nNumber of workers to use for type checking.\n\nDefault: `# of CPUS - 2`\n\n### memoryLimit\n\nMemory limit for type checking service process in MB.\n\nDefault: `2048`\n\n### polyfills\n\nPolyfills to load before application\n\n### stylePreprocessorOptions\n\nOptions to pass to style preprocessors.\n\n### webpackConfig\n\nPath to a function which takes a webpack config, some context and returns the resulting webpack config. See https://nx.dev/guides/customize-webpack\n\n## Angular Options\n\n### aot\n\nBuild using Ahead of Time compilation.\n\n### buildEventLog\n\n**EXPERIMENTAL** Output file path for Build Event Protocol events\n\n### buildOptimizer\n\nEnables `@angular-devkit/build-optimizer` optimizations when using the `--aot` option.\n\n### configuration (-c)\n\nA named build target, as specified in the \"configurations\" section of angular.json.\nEach named target is accompanied by a configuration of option defaults for that target.\nSetting this explicitly overrides the \"--prod\" flag\n\n### crossOrigin\n\nDefine the crossorigin attribute setting of elements that provide CORS support.\n\n### deleteOutputPath\n\nDelete the output path before building.\n\n### deployUrl\n\nURL where files will be deployed.\n\n### es5BrowserSupport\n\nEnables conditionally loaded ES2015 polyfills.\n\n### evalSourceMap\n\nOutput in-file eval sourcemaps.\n\n### experimentalRollupPass\n\nConcatenate modules with Rollup before bundling them with Webpack.\n\n### forkTypeChecker\n\nRun the TypeScript type checker in a forked process.\n\n### i18nFile\n\nLocalization file to use for i18n.\n\n### i18nFormat\n\nFormat of the localization file specified with --i18n-file.\n\n### i18nLocale\n\nLocale to use for i18n.\n\n### i18nMissingTranslation\n\nHow to handle missing translations for i18n.\n\n### localize\n\n### ngswConfigPath\n\nPath to ngsw-config.json.\n\n### poll\n\nEnable and define the file watching poll time period in milliseconds.\n\n### polyfills\n\nThe full path for the polyfills file, relative to the current workspace.\n\n### preserveSymlinks\n\nDo not use the real path when resolving modules.\n\n### rebaseRootRelativeCssUrls\n\nChange root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release.\n\n### resourcesOutputPath\n\nThe path where style resources will be placed, relative to outputPath.\n\n### serviceWorker\n\nGenerates a service worker config for production builds.\n\n### skipAppShell\n\nFlag to prevent building an app shell.\n\n### vendorSourceMap\n\nResolve vendor packages sourcemaps.\n\n### verbose\n\nAdds more details to output logging.\n\n### webWorkerTsConfig\n\nTypeScript configuration for Web Worker modules.\n"
    },
    {
      "name": "test",
      "id": "test",
      "file": "generated/cli/test",
      "content": "---\ntitle: 'test - CLI command'\ndescription: 'Runs unit tests in a project using the configured unit test runner.'\n---\n\n# test\n\nRuns unit tests in a project using the configured unit test runner.\n\n## Usage\n\nThe `test` command is a built-in alias to the [run command](/cli/run).\n\nThese two commands are equivalent:\n\n```bash\nnx test <project> [options]\n```\n\n```bash\nnx run <project>:test [options]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nRun unit tests:\n\n```bash\nnx test myapp\n```\n\n## Common Options\n\nThe options below are common to the `test` command used within an Nx workspace. The Jest and Karma-specific test options are listed after these options.\n\n### codeCoverage\n\nIndicates that test coverage information should be collected and reported in the output. (https://jestjs.io/docs/en/cli#coverage)\n\n### tsConfig\n\nThe path to the Typescript configuration file.\n\n### watch\n\nWatch files for changes and rerun tests.\n\n### help\n\nShow help information.\n\n### version\n\nShow version number\n\n## Jest Options\n\n### bail\n\nExit the test suite immediately after `n` number of failing tests. (https://jestjs.io/docs/en/cli#bail)\n\n### ci\n\nWhether to run Jest in continuous integration (CI) mode. This option is on by default in most popular CI environments. It will prevent snapshots from being written unless explicitly requested. (https://jestjs.io/docs/en/cli#ci)\n\n### color\n\nForces test results output color highlighting (even if stdout is not a TTY). Set to false if you would like to have no colors. (https://jestjs.io/docs/en/cli#colors)\n\n### colors\n\nForces test results output highlighting even if stdout is not a TTY. (https://jestjs.io/docs/en/cli#colors)\n\n### coverageReporters\n\nA list of reporter names that Jest uses when writing coverage reports. Any istanbul reporter\n\n### coverageDirectory\n\nAn array of regexp pattern strings that are matched against all file paths before executing the test. If the file path matches any of the patterns, coverage information will be skipped.\n\n### config\n\nThe path to a Jest config file specifying how to find and execute tests. If no rootDir is set in the config, the directory containing the config file is assumed to be the rootDir for the project. This can also be a JSON-encoded value which Jest will use as configuration\n\n### clearCache\n\nDeletes the Jest cache directory and then exits without running tests. Will delete Jest's default cache directory. _Note: clearing the cache will reduce performance_.\n\n### findRelatedTests\n\nFind and run the tests that cover a comma separated list of source files that were passed in as arguments. (https://jestjs.io/docs/en/cli#findrelatedtests-spaceseparatedlistofsourcefiles)\n\n### jestConfig\n\nThe path of the Jest configuration. (https://jestjs.io/docs/en/configuration)\n\n### json\n\nPrints the test results in JSON. This mode will send all other test output and user messages to stderr. (https://jestjs.io/docs/en/cli#json)\n\n### maxWorkers\n\nSpecifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. Useful for CI. (its usually best not to override this default) (https://jestjs.io/docs/en/cli#maxworkers-num)\n\n### onlyChanged\n\nAttempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git or hg repository at the moment. (https://jestjs.io/docs/en/cli#onlychanged)\n\n### outputFile\n\nWrite test results to a file when the --json option is also specified. (https://jestjs.io/docs/en/cli#outputfile-filename)\n\n### passWithNoTests\n\nWill not fail if no tests are found (for example while using `--testPathPattern`.) (https://jestjs.io/docs/en/cli#passwithnotests)\n\n### reporters\n\nRun tests with specified reporters. Reporter options are not available via CLI. Example with multiple reporters: jest --reporters=\"default\" --reporters=\"jest-junit\" (https://jestjs.io/docs/en/cli#reporters)\n\n### runInBand\n\nRun all tests serially in the current process (rather than creating a worker pool of child processes that run tests). This is sometimes useful for debugging, but such use cases are pretty rare. Useful for CI. (https://jestjs.io/docs/en/cli#runinband)\n\n### setupFile\n\nThe name of a setup file used by Jest. (https://jestjs.io/docs/en/configuration#setupfilesafterenv-array)\n\n### silent\n\nPrevent tests from printing messages through the console. (https://jestjs.io/docs/en/cli#silent)\n\n### testFile\n\nThe name of the file to test.\n\n### testNamePattern\n\nRun only tests with a name that matches the regex pattern. (https://jestjs.io/docs/en/cli#testnamepattern-regex)\n\n### testPathPattern\n\nAn array of regexp pattern strings that is matched against all tests paths before executing the test. (https://jestjs.io/docs/en/cli#testpathpattern-regex)\n\n### testLocationInResults\n\nAdds a location field to test results. Used to report location of a test in a reporter. { \"column\": 4, \"line\": 5 } (https://jestjs.io/docs/en/cli#testlocationinresults)\n\n### testResultsProcessor\n\nNode module that implements a custom results processor. (https://jestjs.io/docs/en/configuration#testresultsprocessor-string)\n\n### updateSnapshot\n\nUse this flag to re-record snapshots. Can be used together with a test suite pattern or with `--testNamePattern` to re-record snapshot for test matching the pattern. (https://jestjs.io/docs/en/cli#updatesnapshot)\n\n### useStderr\n\nDivert all output to stderr.\n\n### verbose\n\nDisplay individual test results with the test suite hierarchy. (https://jestjs.io/docs/en/cli#verbose)\n\n### watchAll\n\nWatch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the `--watch` option. (https://jestjs.io/docs/en/cli#watchall)\n\n## Karma Options\n\n### browsers\n\nOverride which browsers tests are run against.\n\n### codeCoverage\n\nOutput a code coverage report.\n\n### codeCoverageExclude\n\nGlobs to exclude from code coverage.\n\n### configuration (-c)\n\nA named build target, as specified in the \"configurations\" section of angular.json.\nEach named target is accompanied by a configuration of option defaults for that target.\nSetting this explicitly overrides the `--prod` flag.\n\n### environment\n\nDefines the build environment.\n\n### evalSourceMap\n\nOutput in-file eval sourcemaps.\n\n### help\n\nShows a help message for this command in the console.\n\n### include\n\nGlobs of files to include, relative to workspace or project root.\n\nThere are 2 special cases:\n\n- when a path to directory is provided, all spec files ending \".spec.@(ts|tsx)\" will be included\n- when a path to a file is provided, and a matching spec file exists it will be included instead\n\n### karmaConfig\n\nThe name of the Karma configuration file.\n\n### main\n\nThe name of the main entry-point file.\n\n### poll\n\nEnable and define the file watching poll time period in milliseconds.\n\n### polyfills\n\nThe name of the polyfills file.\n\n### preserveSymlinks\n\nDo not use the real path when resolving modules.\n\n### prod\n\nShorthand for \"--configuration=production\". When true, sets the build configuration to the production target. By default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.\n\n### progress\n\nLog progress to the console while building.\n\n### reporters\n\nKarma reporters to use. Directly passed to the karma runner.\n\n### sourceMap\n\nOutput sourcemaps.\n\n### tsConfig\n\nThe name of the TypeScript configuration file.\n\n### vendorSourceMap\n\nResolve vendor packages sourcemaps.\n\n### watch\n\nRun build when files change.\n\n### webWorkerTsConfig\n\nTypeScript configuration for Web Worker modules.\n"
    },
    {
      "name": "lint",
      "id": "lint",
      "file": "generated/cli/lint",
      "content": "---\ntitle: 'lint - CLI command'\ndescription: 'Runs linting tools on application code in a given project folder using the configured linter.'\n---\n\n# lint\n\nRuns linting tools on application code in a given project folder using the configured linter.\n\n## Usage\n\nThe `lint` command is a built-in alias to the [run command](/cli/run).\n\nThese two commands are equivalent:\n\n```bash\nnx lint <project> [options]\n```\n\n```bash\nnx run <project>:lint [options]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nRun lint checks for the `myapp` project and fix linter errors:\n\n```bash\nnx lint myapp --fix\n```\n\n## Common Options\n\nThe options below are common to the `lint` command used within an Nx workspace. The ESLint and Angular-specific lint options are listed after these options.\n\n### exclude\n\nFiles to exclude from linting.\n\n### files\n\nFiles to include in linting.\n\n### fix\n\nFixes linting errors (may overwrite linted files).\n\n### force\n\nSucceeds even if there was linting errors.\n\n### format\n\nESLint Output formatter (https://eslint.org/docs/user-guide/formatters). (default: stylish)\n\n### silent\n\nHide output text.\n\n### tsConfig\n\nThe name of the TypeScript configuration file.\n\n### help\n\nShow help information\n\n### version\n\nShow version number\n\n## ESLint Options\n\n### cache\n\nOnly check changed files.\n\n### cacheLocation\n\nPath to the cache file or directory.\n\n### config\n\nThe name of the configuration file.\n\n### linter\n\nThe tool to use for running lint checks.\n\nDefault: `tslint`\n\n### outputFile\n\nFile to write report to.\n\n## Angular-TSLint Options\n\n### configuration (-c)\n\nThe linting configuration to use.\n\n### tslint-config\n\nThe name of the TSLint configuration file.\n\n### type-check\n\nControls the type check for linting.\n"
    },
    {
      "name": "e2e",
      "id": "e2e",
      "file": "generated/cli/e2e",
      "content": "---\ntitle: 'e2e - CLI command'\ndescription: 'Builds and serves an app, then runs end-to-end tests using the configured E2E test runner.'\n---\n\n# e2e\n\nBuilds and serves an app, then runs end-to-end tests using the configured E2E test runner.\n\n## Usage\n\nThe `e2e` command is a built-in alias to the [run command](/cli/run).\n\nThese two commands are equivalent:\n\n```bash\nnx e2e <project>\n```\n\n```bash\nnx run <project>:e2e\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nRun E2E test with a custom base url:\n\n```bash\nnx e2e myapp-e2e --base-url http://localhost:4201\n```\n\nRun E2E test with a specific target:\n\n```bash\nnx e2e myapp-e2e --configuration smoke\n```\n\nRun E2E test in watch mode:\n\n```bash\nnx e2e myapp-e2e --watch\n```\n\n## Common Options\n\nThe options below are common to the E2E commands used within an Nx workspace. Cypress and Protractor-specific options are listed below.\n\n### baseUrl\n\nUse this to pass directly the address of your distant server address with the port running your application. Setting this will ignore any local server targets. To skip running local targets, reset the `devServerTarget` to empty string.\n\n### configuration (-c)\n\nA named build target, as specified in the \"configurations\" section of angular.json. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the `--prod` option.\n\n### devServerTarget\n\nDev server target to run tests against.\n\n### prod\n\nShorthand for `--configuration=production`. When true, sets the build configuration to the production target. By default, the production target is set up in the workspace configuration such that all builds make use of bundling, limited tree-shaking, and also limited dead code elimination.\n\n### version\n\nShow version number\n\n### watch\n\nOpen the Cypress test runner & automatically run tests when files are updated\n\n## Cypress Options\n\n### browser\n\nThe browser to run tests in.\n\n### ci-build-id\n\nA unique identifier for a run to enable grouping or parallelization.\n\n### ci-build-id\n\nA unique identifier for a run to enable grouping or parallelization.\n\n### cypress-config\n\nThe path of the Cypress configuration json file.\n\n### exit\n\nWhether or not the Cypress Test Runner will stay open after running tests in a spec file\n\n### group\n\nA named group for recorded runs in the Cypress dashboard.\n\n### headless\n\nWhether or not to open the Cypress application to run the tests. If set to 'true', will run in headless mode.\n\n### help\n\nShows a help message for this command in the console.\n\n### key\n\nThe key cypress should use to run tests in parallel/record the run (CI only).\n\n### parallel\n\nWhether or not Cypress should run its tests in parallel (CI only).\n\n### record\n\nWhether or not Cypress should record the results of the tests\n\n### spec\n\nA comma delimited glob string that is provided to the Cypress runner to specify which spec files to run. For example: '**examples/**,**actions.spec**\n\n### ts-config\n\nThe path of the Cypress tsconfig configuration json file.\n\n## Protractor Options\n\n### element-explorer\n\nStart Protractor's Element Explorer for debugging.\n\n### host\n\nHost to listen on.\n\n### port\n\nThe port to use to serve the application.\n\n### protractor-config\n\nThe name of the Protractor configuration file.\n\n### specs\n\nOverride specs in the protractor config.\n\n### suite\n\nOverride suite in the protractor config.\n\n### webdriver-update\n\nTry to update webdriver.\n"
    },
    {
      "name": "run",
      "id": "run",
      "file": "generated/cli/run",
      "content": "---\ntitle: 'run - CLI command'\ndescription: 'Runs an Architect target with an optional custom builder configuration defined in your project.'\n---\n\n# run\n\nRuns an Architect target with an optional custom builder configuration defined in your project.\n\n## Usage\n\n```bash\nnx run <target> [options]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nRun the `build` target for the `myapp` :\n\n```bash\nnx run myapp:build\n```\n\nRun the `build` target for the `myapp` project with a `production` configuration:\n\n```bash\nnx run myapp:build:production\n```\n\n## Options\n\n### configuration (-c)\n\nA named builder configuration, defined in the \"configurations\" section of the workspace configuration file. The builder uses the named configuration to run the given target.\n\n### help\n\nShow help\n\n### version\n\nShow version number\n"
    },
    {
      "name": "daemon",
      "id": "daemon",
      "file": "generated/cli/daemon",
      "content": "---\ntitle: 'daemon - CLI command'\ndescription: 'Prints information about the Nx Daemon process'\n---\n\n# daemon\n\nPrints information about the Nx Daemon process\n\n## Usage\n\n```bash\nnx daemon\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n## Options\n\n### background\n\nType: boolean\n\nDefault: true\n\n### help\n\nType: boolean\n\nShow help\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "graph",
      "id": "dep-graph",
      "file": "generated/cli/graph",
      "content": "---\ntitle: 'graph - CLI command'\ndescription: 'Graph dependencies within workspace'\n---\n\n# graph\n\nGraph dependencies within workspace\n\n## Usage\n\n```bash\nnx graph\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nOpen the project graph of the workspace in the browser:\n\n```bash\nnx graph\n```\n\nSave the project graph into a json file:\n\n```bash\nnx graph --file=output.json\n```\n\nGenerate a static website with project graph into an html file, accompanied by an asset folder called static:\n\n```bash\nnx graph --file=output.html\n```\n\nShow the graph where every node is either an ancestor or a descendant of todos-feature-main:\n\n```bash\nnx graph --focus=todos-feature-main\n```\n\nInclude project-one and project-two in the project graph:\n\n```bash\nnx graph --include=project-one,project-two\n```\n\nExclude project-one and project-two from the project graph:\n\n```bash\nnx graph --exclude=project-one,project-two\n```\n\nShow the graph where every node is either an ancestor or a descendant of todos-feature-main, but exclude project-one and project-two:\n\n```bash\nnx graph --focus=todos-feature-main --exclude=project-one,project-two\n```\n\nWatch for changes to project graph and update in-browser:\n\n```bash\nnx graph --watch\n```\n\n## Options\n\n### exclude\n\nType: array\n\nList of projects delimited by commas to exclude from the project graph.\n\n### file\n\nType: string\n\nOutput file (e.g. --file=output.json or --file=dep-graph.html)\n\n### focus\n\nType: string\n\nUse to show the project graph for a particular project and every node that is either an ancestor or a descendant.\n\n### groupByFolder\n\nType: boolean\n\nGroup projects by folder in the project graph\n\n### help\n\nType: boolean\n\nShow help\n\n### host\n\nType: string\n\nBind the project graph server to a specific ip address.\n\n### open\n\nType: boolean\n\nDefault: true\n\nOpen the project graph in the browser.\n\n### port\n\nType: number\n\nBind the project graph server to a specific port.\n\n### version\n\nType: boolean\n\nShow version number\n\n### watch\n\nType: boolean\n\nDefault: false\n\nWatch for changes to project graph and update in-browser\n"
    },
    {
      "name": "run-many",
      "id": "run-many",
      "file": "generated/cli/run-many",
      "content": "---\ntitle: 'run-many - CLI command'\ndescription: 'Run target for multiple listed projects'\n---\n\n# run-many\n\nRun target for multiple listed projects\n\n## Usage\n\n```bash\nnx run-many\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nTest all projects:\n\n```bash\nnx run-many --target=test --all\n```\n\nTest proj1 and proj2:\n\n```bash\nnx run-many --target=test --projects=proj1,proj2\n```\n\nTest proj1 and proj2 in parallel:\n\n```bash\nnx run-many --target=test --projects=proj1,proj2 --parallel=2\n```\n\n## Options\n\n### all\n\nType: boolean\n\nRun the target on all projects in the workspace\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### help\n\nType: boolean\n\nShow help\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nOnly run the target on projects which previously failed\n\n### output-style\n\nType: string\n\nChoices: [dynamic, static, stream]\n\nDefines how Nx emits outputs tasks logs\n\n### parallel\n\nType: string\n\nMax number of parallel processes [default is 3]\n\n### projects\n\nType: string\n\nProjects to run (comma delimited)\n\n### runner\n\nType: string\n\nOverride the tasks runner in `nx.json`\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### target\n\nType: string\n\nTask to run for affected projects\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "affected",
      "id": "affected",
      "file": "generated/cli/affected",
      "content": "---\ntitle: 'affected - CLI command'\ndescription: 'Run target for affected projects'\n---\n\n# affected\n\nRun target for affected projects\n\n## Usage\n\n```bash\nnx affected\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nRun custom target for all affected projects:\n\n```bash\nnx affected --target=custom-target\n```\n\nRun tests in parallel:\n\n```bash\nnx affected --target=test --parallel=5\n```\n\nRun the test target for all projects:\n\n```bash\nnx affected --target=test --all\n```\n\nRun tests for all the projects affected by changing the index.ts file:\n\n```bash\nnx affected --target=test --files=libs/mylib/src/index.ts\n```\n\nRun tests for all the projects affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected --target=test --base=main --head=HEAD\n```\n\nRun tests for all the projects affected by the last commit on main:\n\n```bash\nnx affected --target=test --base=main~1 --head=main\n```\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### output-style\n\nType: string\n\nChoices: [dynamic, static, stream]\n\nDefines how Nx emits outputs tasks logs\n\n### parallel\n\nType: string\n\nMax number of parallel processes [default is 3]\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### target\n\nType: string\n\nTask to run for affected projects\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "affected:graph",
      "id": "affected-dep-graph",
      "file": "generated/cli/affected-graph",
      "content": "---\ntitle: 'affected:graph - CLI command'\ndescription: 'Graph dependencies affected by changes'\n---\n\n# affected:graph\n\nGraph dependencies affected by changes\n\n## Usage\n\n```bash\nnx affected:graph\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nOpen the project graph of the workspace in the browser, and highlight the projects affected by changing the index.ts file:\n\n```bash\nnx affected:graph --files=libs/mylib/src/index.ts\n```\n\nOpen the project graph of the workspace in the browser, and highlight the projects affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected:graph --base=main --head=HEAD\n```\n\nSave the project graph of the workspace in a json file, and highlight the projects affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected:graph --base=main --head=HEAD --file=output.json\n```\n\nGenerate a static website with project graph data in an html file, highlighting the projects affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected:graph --base=main --head=HEAD --file=output.html\n```\n\nOpen the project graph of the workspace in the browser, and highlight the projects affected by the last commit on main:\n\n```bash\nnx affected:graph --base=main~1 --head=main\n```\n\nOpen the project graph of the workspace in the browser, highlight the projects affected, but exclude project-one and project-two:\n\n```bash\nnx affected:graph --exclude=project-one,project-two\n```\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### file\n\nType: string\n\nOutput file (e.g. --file=output.json or --file=dep-graph.html)\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### focus\n\nType: string\n\nUse to show the project graph for a particular project and every node that is either an ancestor or a descendant.\n\n### groupByFolder\n\nType: boolean\n\nGroup projects by folder in the project graph\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### host\n\nType: string\n\nBind the project graph server to a specific ip address.\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### open\n\nType: boolean\n\nDefault: true\n\nOpen the project graph in the browser.\n\n### port\n\nType: number\n\nBind the project graph server to a specific port.\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n\n### watch\n\nType: boolean\n\nDefault: false\n\nWatch for changes to project graph and update in-browser\n"
    },
    {
      "name": "affected:apps",
      "id": "affected-apps",
      "file": "generated/cli/affected-apps",
      "content": "---\ntitle: 'affected:apps - CLI command'\ndescription: 'Print applications affected by changes'\n---\n\n# affected:apps\n\nPrint applications affected by changes\n\n## Usage\n\n```bash\nnx affected:apps\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nPrint the names of all the apps affected by changing the index.ts file:\n\n```bash\nnx affected:apps --files=libs/mylib/src/index.ts\n```\n\nPrint the names of all the apps affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected:apps --base=main --head=HEAD\n```\n\nPrint the names of all the apps affected by the last commit on main:\n\n```bash\nnx affected:apps --base=main~1 --head=main\n```\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### plain\n\nProduces a plain output for affected:apps and affected:libs\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "affected:libs",
      "id": "affected-libs",
      "file": "generated/cli/affected-libs",
      "content": "---\ntitle: 'affected:libs - CLI command'\ndescription: 'Print libraries affected by changes'\n---\n\n# affected:libs\n\nPrint libraries affected by changes\n\n## Usage\n\n```bash\nnx affected:libs\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nPrint the names of all the libs affected by changing the index.ts file:\n\n```bash\nnx affected:libs --files=libs/mylib/src/index.ts\n```\n\nPrint the names of all the libs affected by the changes between main and HEAD (e.g., PR):\n\n```bash\nnx affected:libs --base=main --head=HEAD\n```\n\nPrint the names of all the libs affected by the last commit on main:\n\n```bash\nnx affected:libs --base=main~1 --head=main\n```\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### plain\n\nProduces a plain output for affected:apps and affected:libs\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "print-affected",
      "id": "print-affected",
      "file": "generated/cli/print-affected",
      "content": "---\ntitle: 'print-affected - CLI command'\ndescription: 'Prints information about the projects and targets affected by changes'\n---\n\n# print-affected\n\nPrints information about the projects and targets affected by changes\n\n## Usage\n\n```bash\nnx print-affected\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nPrint information about affected projects and the project graph:\n\n```bash\nnx print-affected\n```\n\nPrint information about the projects affected by the changes between main and HEAD (e.g,. PR):\n\n```bash\nnx print-affected --base=main --head=HEAD\n```\n\nPrints information about the affected projects and a list of tasks to test them:\n\n```bash\nnx print-affected --target=test\n```\n\nPrints the projects property from the print-affected output:\n\n```bash\nnx print-affected --target=build --select=projects\n```\n\nPrints the tasks.target.project property from the print-affected output:\n\n```bash\nnx print-affected --target=build --select=tasks.target.project\n```\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### select\n\nType: string\n\nSelect the subset of the returned json document (e.g., --selected=projects)\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "format:check",
      "id": "format-check",
      "file": "generated/cli/format-check",
      "content": "---\ntitle: 'format:check - CLI command'\ndescription: 'Check for un-formatted files'\n---\n\n# format:check\n\nCheck for un-formatted files\n\n## Usage\n\n```bash\nnx format:check\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### libs-and-apps\n\nType: boolean\n\nFormat only libraries and applications files.\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### projects\n\nType: array\n\nProjects to format (comma delimited)\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "format:write",
      "id": "format-write",
      "file": "generated/cli/format-write",
      "content": "---\ntitle: 'format:write - CLI command'\ndescription: 'Overwrite un-formatted files'\n---\n\n# format:write\n\nOverwrite un-formatted files\n\n## Usage\n\n```bash\nnx format:write\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n## Options\n\n### all\n\nType: boolean\n\nAll projects\n\n### base\n\nType: string\n\nBase of the current branch (usually main)\n\n### configuration\n\nType: string\n\nThis is the configuration to use when performing tasks on projects\n\n### exclude\n\nType: array\n\nDefault: []\n\nExclude certain projects from being processed\n\n### files\n\nType: array\n\nChange the way Nx is calculating the affected command by providing directly changed files, list of files delimited by commas\n\n### head\n\nType: string\n\nLatest commit of the current branch (usually HEAD)\n\n### help\n\nType: boolean\n\nShow help\n\n### libs-and-apps\n\nType: boolean\n\nFormat only libraries and applications files.\n\n### ~~only-failed~~\n\nType: boolean\n\nDefault: false\n\n**Deprecated:** The command to rerun failed projects will appear if projects fail. This now does nothing and will be removed in v15.\n\nIsolate projects which previously failed\n\n### projects\n\nType: array\n\nProjects to format (comma delimited)\n\n### runner\n\nType: string\n\nThis is the name of the tasks runner configured in nx.json\n\n### skip-nx-cache\n\nType: boolean\n\nDefault: false\n\nRerun the tasks even when the results are available in the cache\n\n### uncommitted\n\nType: boolean\n\nUncommitted changes\n\n### untracked\n\nType: boolean\n\nUntracked changes\n\n### verbose\n\nPrint additional error stack trace on failure\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "migrate",
      "id": "migrate",
      "file": "generated/cli/migrate",
      "content": "---\ntitle: \"migrate - CLI command\"\ndescription: \"Creates a migrations file or runs migrations from the migrations file.\n- Migrate packages and create migrations.json (e.g., nx migrate @nrwl/workspace@latest)\n- Run migrations (e.g., nx migrate --run-migrations=migrations.json)\"\n---\n\n# migrate\n\nCreates a migrations file or runs migrations from the migrations file.\n\n- Migrate packages and create migrations.json (e.g., nx migrate @nrwl/workspace@latest)\n- Run migrations (e.g., nx migrate --run-migrations=migrations.json)\n\n## Usage\n\n```bash\nnx migrate [packageAndVersion]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nUpdate @nrwl/workspace to \"next\". This will update other packages and will generate migrations.json:\n\n```bash\nnx migrate next\n```\n\nUpdate @nrwl/workspace to \"9.0.0\". This will update other packages and will generate migrations.json:\n\n```bash\nnx migrate 9.0.0\n```\n\nUpdate @nrwl/workspace and generate the list of migrations starting with version 8.0.0 of @nrwl/workspace and @nrwl/node, regardless of what installed locally:\n\n```bash\nnx migrate @nrwl/workspace@9.0.0 --from=\"@nrwl/workspace@8.0.0,@nrwl/node@8.0.0\"\n```\n\nUpdate @nrwl/workspace to \"9.0.0\". If it tries to update @nrwl/react or @nrwl/angular, use version \"9.0.1\":\n\n```bash\nnx migrate @nrwl/workspace@9.0.0 --to=\"@nrwl/react@9.0.1,@nrwl/angular@9.0.1\"\n```\n\nUpdate another-package to \"12.0.0\". This will update other packages and will generate migrations.json file:\n\n```bash\nnx migrate another-package@12.0.0\n```\n\nRun migrations from the provided migrations.json file. You can modify migrations.json and run this command many times:\n\n```bash\nnx migrate --run-migrations=migrations.json\n```\n\nCreate a dedicated commit for each successfully completed migration. You can customize the prefix used for each commit by additionally setting --commit-prefix=\"PREFIX_HERE \":\n\n```bash\nnx migrate --run-migrations --create-commits\n```\n\n## Options\n\n### commitPrefix\n\nType: string\n\nDefault: chore: [nx migration]\n\nCommit prefix to apply to the commit for each migration, when --create-commits is enabled\n\n### createCommits\n\nType: boolean\n\nDefault: false\n\nAutomatically create a git commit after each migration runs\n\n### from\n\nType: string\n\nUse the provided versions for packages instead of the ones installed in node_modules (e.g., --from=\"@nrwl/react:12.0.0,@nrwl/js:12.0.0\")\n\n### help\n\nType: boolean\n\nShow help\n\n### packageAndVersion\n\nType: string\n\nThe target package and version (e.g, @nrwl/workspace@13.0.0)\n\n### runMigrations\n\nType: string\n\nExecute migrations from a file (when the file isn't provided, execute migrations from migrations.json)\n\n### to\n\nType: string\n\nUse the provided versions for packages instead of the ones calculated by the migrator (e.g., --to=\"@nrwl/react:12.0.0,@nrwl/js:12.0.0\")\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "report",
      "id": "report",
      "file": "generated/cli/report",
      "content": "---\ntitle: 'report - CLI command'\ndescription: 'Reports useful version numbers to copy into the Nx issue template'\n---\n\n# report\n\nReports useful version numbers to copy into the Nx issue template\n\n## Usage\n\n```bash\nnx report\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n"
    },
    {
      "name": "list",
      "id": "list",
      "file": "generated/cli/list",
      "content": "---\ntitle: 'list - CLI command'\ndescription: 'Lists installed plugins, capabilities of installed plugins and other available plugins.'\n---\n\n# list\n\nLists installed plugins, capabilities of installed plugins and other available plugins.\n\n## Usage\n\n```bash\nnx list [plugin]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n### Examples\n\nList the plugins installed in the current workspace:\n\n```bash\nnx list\n```\n\nList the generators and executors available in the `@nrwl/web` plugin if it is installed (If the plugin is not installed `nx` will show advice on how to add it to your workspace):\n\n```bash\nnx list @nrwl/web\n```\n\n## Options\n\n### help\n\nType: boolean\n\nShow help\n\n### plugin\n\nType: string\n\nThe name of an installed plugin to query\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "workspace-lint",
      "id": "workspace-lint",
      "file": "generated/cli/workspace-lint",
      "content": "---\ntitle: 'workspace-lint - CLI command'\ndescription: 'Lint nx specific workspace files (nx.json, workspace.json)'\n---\n\n# workspace-lint\n\nLint nx specific workspace files (nx.json, workspace.json)\n\n## Usage\n\n```bash\nnx workspace-lint [files..]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n"
    },
    {
      "name": "workspace-generator",
      "id": "workspace-generator",
      "file": "generated/cli/workspace-generator",
      "content": "---\ntitle: 'workspace-generator - CLI command'\ndescription: 'Runs a workspace generator from the tools/generators directory'\n---\n\n# workspace-generator\n\nRuns a workspace generator from the tools/generators directory\n\n## Usage\n\n```bash\nnx workspace-generator [name]\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n## Options\n\n### help\n\nType: boolean\n\nShow help\n\n### list-generators\n\nType: boolean\n\nList the available workspace-generators\n\n### name\n\nType: string\n\nThe name of your generator\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "connect-to-nx-cloud",
      "id": "connect-to-nx-cloud",
      "file": "generated/cli/connect-to-nx-cloud",
      "content": "---\ntitle: 'connect-to-nx-cloud - CLI command'\ndescription: 'Makes sure the workspace is connected to Nx Cloud'\n---\n\n# connect-to-nx-cloud\n\nMakes sure the workspace is connected to Nx Cloud\n\n## Usage\n\n```bash\nnx connect-to-nx-cloud\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n\n## Options\n\n### help\n\nType: boolean\n\nShow help\n\n### version\n\nType: boolean\n\nShow version number\n"
    },
    {
      "name": "reset",
      "id": "reset",
      "file": "generated/cli/reset",
      "content": "---\ntitle: 'reset - CLI command'\ndescription: 'Clears all the cached Nx artifacts and metadata about the workspace and shuts down the Nx Daemon.'\n---\n\n# reset\n\nClears all the cached Nx artifacts and metadata about the workspace and shuts down the Nx Daemon.\n\n## Usage\n\n```bash\nnx reset\n```\n\n[Install `nx` globally](/getting-started/nx-setup#install-nx) to invoke the command directly using `nx`, or use `npx nx`, `yarn nx`, or `pnpx nx`.\n"
    }
  ],
  "generators": [],
  "executors": []
}
